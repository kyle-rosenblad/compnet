[{"path":"https://kyle-rosenblad.github.io/compnet/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 compnet authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/articles/compnet_workflow.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"compnet_workflow","text":"goal quantify effect competitive niche differentiation community assembly group species. Competitive niche differentiation process whereby functional dissimilarity species promotes co-occurrence decreased overlap resource use. available data include species--site presence-absence matrix, well one species-level variables (e.g., plant rooting depth) /variables pertain species pairs (e.g., phylogenetic distance). using ‘compnet’, ’ll translate conceptual goal quantitative “estimand” (.e., something ’re aiming estimate model). estimand effect functional dissimilarity species (quantified via one traits; see ) probability co-occurrence. define probability co-occurrence species pair probability species pair co-occur given site, given least one present. estimate effect functional dissimilarity co-occurrence probabilities, use regression model, units analysis species pairs. response variable ratio sites containing species sites containing least one two species. predictor(s) can encompass traits think might influence competitive niche differentiation (e.g., plant species’ rooting depth), pair-level variables serve proxy functional dissimilarity (e.g., phylogenetic distance). can include many predictors want. ’ll take advantage fact later, adjust suspected confounding variable. Using species pairs units analysis can cause problems typical regression models, ‘compnet’ tools dealing problems. build regression model (e.g., linear regression, GLM, GLMM, etc.), usually assume errors independently distributed. assumption likely violated model species pairs network “independent” observations. starters, pairs involving given species might share features common. ‘compnet’ models include components designed account kind pattern. Additionally, can higher-order patterns non-independence among species pairs–e.g., “enemy enemy friend”. ‘compnet’ also optional model features dealing higher-order patterns, demonstrate . Let’s get started!","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/articles/compnet_workflow.html","id":"data-prep","dir":"Articles","previous_headings":"","what":"Data prep","title":"compnet_workflow","text":"","code":"set.seed(287) # Ensure reproducibility  # Load an example presence-absence matrix: data(\"ex_presabs\")  # View the first few rows and columns. # Rows are sites, and columns are species. # rownames and colnames are specified accordingly. ex_presabs[1:3, 1:3] #>       sp1 sp2 sp3 #> site1   0   0   0 #> site2   0   0   0 #> site3   0   0   1 # Load example species-level trait data: data(\"ex_traits\")  # View the first few species. # Rows are species, and columns are traits. # rownames and colnames are specified accordingly. ex_traits[1:3,] #>        ndtrait   domtrait #> sp1 -0.9283953 -0.7888064 #> sp2 -0.1460273  0.3867546 #> sp3  0.7896740  1.6554773"},{"path":"https://kyle-rosenblad.github.io/compnet/articles/compnet_workflow.html","id":"model-with-one-species-trait-5-10-min-","dir":"Articles","previous_headings":"","what":"Model with one species trait (5-10 min.)","title":"compnet_workflow","text":"example data set, “ndtrait” trait think might drive competitive niche differentiation, “domtrait” trait think might influence competitive ability. First ’ll build model just ndtrait, since competitive niche differentiation process ’re interested . “ndtrait” driving competitive niche differentiation, expect species pairs differ strongly trait likely co-occur. ’ll model effect including “distance interaction” “ndtrait”. words, species pair, model use species ’s value “ndtrait”, species B’s value, absolute value difference two. last term directly captures effect ’re interested , called “heterophily” social sciences (.e., things different attracted ). Social scientists often model heterophily using multiplicative interaction term instead distance term, generally find approach less optimal studying competitive niche differentiation. (‘compnet’ also allows multiplicative interactions, though.) Stan uses algorithm called NUTS estimate results us. don’t let NUTS run enough iterations, can’t trust results. Stan tell us didn’t let model run long enough, provide web links help resources. try build good model, let’s deliberately tell NUTS small number iterations can see warnings look like: Now let’s build first distance interaction model. ’ll call ‘nd_0_mod’ ’re using “ndtrait” predictor, ’re using default ‘rank’ value 0. (’ll discuss importance rank = 0 decision shortly.) model built, Stan (statistical software hood) gives progress updates. Sometimes, takes tries gradually adjusting ‘warmup’ ‘iter’ ’re getting sufficient samples without going overboard. ’ve already done behind scenes, ’ll park us right sweet spot. (default settings produce longer run, don’t need .) try interpret results, let’s see model provides reasonable fit data. One main concerns network data multiple forms non-independence can arise, discussed Introduction. Let’s use ‘gofstats’ function check well model accounts types non-independence example data set: first ‘p-value’, ‘p.sd.rowmeans’, tells us patterns driven fact species pairs include given species share features common. ‘p.sd.rowmeans’ pretty low, means simulate data model ’ve built (‘gofstats’ background), simulated data least much kind non-independence real data. ’s good; means model accounting form non-independence among species pairs. Anything ’s super-high (around maybe 0.9ish ) usually fine. second value, ‘p.cycle.dep’, tells us higher-order multi-species patterns, can abstract complicated, good example saying, “enemy enemy friend”. ‘p.cycle.dep’ isn’t bad. ’s telling us simulate data model, around two thirds simulated data sets less high-order non-independence real data. wouldn’t usually worry value like , sake illustration, let’s try increasing ‘rank’, gofstats() gives problematic results. Also, notice adjusted adapt_delta make sampling run smoothly. particular, strategy can help Stan gives warnings “divergent transitions”. see look like, try running model adapt_delta back default value 0.8, lower. Unsurprisingly, gofstats look fine. move forward model, recommend using ‘DHARMa’ package run additional checks model fit problems. ‘DHARMa’ doesn’t automatically install ‘compnet’. model diagnostic workflow, don’t need use . ’ll check overdispersion, quantile deviations, uniformity, zero inflation. can read ‘DHARMa’ vignette. general, wary tiny p-values, warning messages, visual patterns deviate strongly expected patterns shown DHARMa’s output graphs. One important caveat: large data set, can get tiny p-values even deviations expected patterns trivial.     looks fine. Going forward, keep vignette brief, ’ll suppress plots accompany DHARMa tests, recommend always look projects. Now let’s explore results. First ’ll peek coefficients predictors interest: Let’s see violin plots:  Now ’ll make scatterplot data level species pair. x axis represent trait value “Species ” (vs B arbitrary), y axis represent co-occurrence probability. ’ll include curves mean expectation 95% credible intervals. multiple curves credible intervals, conditioned different value focal trait “Species B”. default, function generate plot conditioning mean values predictor variables traits. (Although example model, traits).  Cool! Species low value “ndtrait”, co-occurrence probability increases Species B’s “ndtrait” value. words, low value “ndtrait”, ’ll likely co-occur species high values. pattern suggests competitive niche differentiation. Similarly, Species ’s “ndtrait” value high, co-occurrence probability decreases Species B’s value. Additionally, Species intermediate value “ndtrait”, co-occurrence probability highest extremes lowest middle. (pattern multiplicative interaction models–opposed distance interaction models–struggle represent.) Overall, pattern strongly indicates competitive niche differentiation.","code":"shortrun <- buildcompnet(presabs=ex_presabs,                   spvars_dist_int=ex_traits[c(\"ndtrait\")],                   warmup=100,                   iter=200) #>  #> SAMPLING FOR MODEL 'srm_binomial' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000101 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 1.01 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: WARNING: There aren't enough warmup iterations to fit the #> Chain 1:          three stages of adaptation as currently configured. #> Chain 1:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 1:          the given number of warmup iterations: #> Chain 1:            init_buffer = 15 #> Chain 1:            adapt_window = 75 #> Chain 1:            term_buffer = 10 #> Chain 1:  #> Chain 1: Iteration:   1 / 200 [  0%]  (Warmup) #> Chain 1: Iteration:  20 / 200 [ 10%]  (Warmup) #> Chain 1: Iteration:  40 / 200 [ 20%]  (Warmup) #> Chain 1: Iteration:  60 / 200 [ 30%]  (Warmup) #> Chain 1: Iteration:  80 / 200 [ 40%]  (Warmup) #> Chain 1: Iteration: 100 / 200 [ 50%]  (Warmup) #> Chain 1: Iteration: 101 / 200 [ 50%]  (Sampling) #> Chain 1: Iteration: 120 / 200 [ 60%]  (Sampling) #> Chain 1: Iteration: 140 / 200 [ 70%]  (Sampling) #> Chain 1: Iteration: 160 / 200 [ 80%]  (Sampling) #> Chain 1: Iteration: 180 / 200 [ 90%]  (Sampling) #> Chain 1: Iteration: 200 / 200 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.558 seconds (Warm-up) #> Chain 1:                0.503 seconds (Sampling) #> Chain 1:                1.061 seconds (Total) #> Chain 1: #> Warning: The largest R-hat is 1.26, indicating chains have not mixed. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#r-hat #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess nd_0_mod <- buildcompnet(presabs=ex_presabs,         spvars_dist_int=ex_traits[c(\"ndtrait\")],         warmup=400,         iter=1200) #>  #> SAMPLING FOR MODEL 'srm_binomial' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 9.8e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.98 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 1200 [  0%]  (Warmup) #> Chain 1: Iteration:  120 / 1200 [ 10%]  (Warmup) #> Chain 1: Iteration:  240 / 1200 [ 20%]  (Warmup) #> Chain 1: Iteration:  360 / 1200 [ 30%]  (Warmup) #> Chain 1: Iteration:  401 / 1200 [ 33%]  (Sampling) #> Chain 1: Iteration:  520 / 1200 [ 43%]  (Sampling) #> Chain 1: Iteration:  640 / 1200 [ 53%]  (Sampling) #> Chain 1: Iteration:  760 / 1200 [ 63%]  (Sampling) #> Chain 1: Iteration:  880 / 1200 [ 73%]  (Sampling) #> Chain 1: Iteration: 1000 / 1200 [ 83%]  (Sampling) #> Chain 1: Iteration: 1120 / 1200 [ 93%]  (Sampling) #> Chain 1: Iteration: 1200 / 1200 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 1.605 seconds (Warm-up) #> Chain 1:                2.352 seconds (Sampling) #> Chain 1:                3.957 seconds (Total) #> Chain 1: nd_0_mod_gofstats <- gofstats(nd_0_mod) #> Approx. completion #> 25% #> 50% #> 75% #> 100% nd_0_mod_gofstats #> p.sd.rowmeans   p.cycle.dep  #>    0.05666667    0.66333333 nd_1_mod <- buildcompnet(presabs=ex_presabs,         spvars_dist_int=ex_traits[c(\"ndtrait\")],         rank=1,         warmup=300,         iter=1000,         adapt_delta=0.9) #>  #> SAMPLING FOR MODEL 'ame_binomial' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000189 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 1.89 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:   1 / 1000 [  0%]  (Warmup) #> Chain 1: Iteration: 100 / 1000 [ 10%]  (Warmup) #> Chain 1: Iteration: 200 / 1000 [ 20%]  (Warmup) #> Chain 1: Iteration: 300 / 1000 [ 30%]  (Warmup) #> Chain 1: Iteration: 301 / 1000 [ 30%]  (Sampling) #> Chain 1: Iteration: 400 / 1000 [ 40%]  (Sampling) #> Chain 1: Iteration: 500 / 1000 [ 50%]  (Sampling) #> Chain 1: Iteration: 600 / 1000 [ 60%]  (Sampling) #> Chain 1: Iteration: 700 / 1000 [ 70%]  (Sampling) #> Chain 1: Iteration: 800 / 1000 [ 80%]  (Sampling) #> Chain 1: Iteration: 900 / 1000 [ 90%]  (Sampling) #> Chain 1: Iteration: 1000 / 1000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 8.481 seconds (Warm-up) #> Chain 1:                14.933 seconds (Sampling) #> Chain 1:                23.414 seconds (Total) #> Chain 1: #> Warning: There were 1 divergent transitions after warmup. See #> https://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup #> to find out why this is a problem and how to eliminate them. #> Warning: Examine the pairs() plot to diagnose sampling problems nd_1_mod_gofstats <- gofstats(nd_1_mod) #> Approx. completion #> 25% #> 50% #> 75% #> 100% nd_1_mod_gofstats #> p.sd.rowmeans   p.cycle.dep  #>    0.07666667    0.70000000 library(DHARMa) #> This is DHARMa 0.4.6. For overview type '?DHARMa'. For recent changes, type news(package = 'DHARMa') nd_1_mod_ppred <- postpredsamp(nd_1_mod) fpr <- apply(nd_1_mod_ppred, 1, mean) nd_1_mod_dharma <- createDHARMa(simulatedResponse = nd_1_mod_ppred,                                 observedResponse = nd_1_mod$d$both,                                 fittedPredictedResponse = fpr,                                 integerResponse = TRUE) testDispersion(nd_1_mod_dharma) #>  #>  DHARMa nonparametric dispersion test via sd of residuals fitted vs. #>  simulated #>  #> data:  simulationOutput #> dispersion = 0.80856, p-value = 0.4486 #> alternative hypothesis: two.sided testQuantiles(nd_1_mod_dharma) #>  #>  Test for location of quantiles via qgam #>  #> data:  simulationOutput #> p-value = 0.6066 #> alternative hypothesis: both testUniformity(nd_1_mod_dharma) #>  #>  Asymptotic one-sample Kolmogorov-Smirnov test #>  #> data:  simulationOutput$scaledResiduals #> D = 0.043339, p-value = 0.6777 #> alternative hypothesis: two-sided testZeroInflation(nd_1_mod_dharma) #>  #>  DHARMa zero-inflation test via comparison to expected zeros with #>  simulation under H0 = fitted model #>  #> data:  simulationOutput #> ratioObsSim = 1.0107, p-value = 0.8829 #> alternative hypothesis: two.sided summarize_compnet(nd_1_mod) #>                    Mean       2.5%      97.5% #> intercept    -5.2180266 -5.9962679 -4.4759117 #> ndtrait_dist  0.8173614  0.5271659  1.1225552 #> ndtrait_sp    0.1136006 -0.2556542  0.4777447 fixedeff_violins(nd_1_mod) scatter_interaction(nd_1_mod, xvar=\"ndtrait\", xlabel=\"ND Trait\")"},{"path":"https://kyle-rosenblad.github.io/compnet/articles/compnet_workflow.html","id":"model-with-two-traits-8-15-min-","dir":"Articles","previous_headings":"","what":"Model with two traits (8-15 min.)","title":"compnet_workflow","text":"might want use multiple traits model? one, might want use strategy deal suspected confounder “lurking variable”. far, ’ve just using “ndtrait”, trait think drives competitive niche differentiation. general, competitive niche differentiation expected produce heterophily, pattern whereby species different trait values co-occur often. However, ’ve got data another trait called “domtrait”, think might influence competitive ability. general, competitive hierarchies produce homophily–.e., species co-occur frequently species similar competitive ability. ’s association “ndtrait” “domtrait”, homophily caused “domtrait” might masking heterophily caused “ndtrait”. Let’s see ’s association two traits: . can ? Let’s include “domtrait” covariate. Adjusting suspected confounder can help us quest unbiased estimate effect “ndtrait” co-occurrence probabilities. (can never perfect causal inference observational data, ’s worth getting close can. ’s another topic.) Let’s try new model “ndtrait” “domtrait” distance-interacting traits. Let’s start rank=0. ’ll also run gofstats() ‘DHARMa’ checks. ’ve got issues high-order non-independence overdispersion, let’s try ‘rank’ = 1. Much better. Let’s quick look results compare model covariate adjustment: coefficient “ndtrait” distance term greater new model. suggests covariate adjustment strategy helped “unmask” true effect “ndtrait” co-occurrence probability. Let’s see scatterplots look much different:   pattern noticeably, wildly, stronger new model.","code":"cor(ex_traits) #>            ndtrait  domtrait #> ndtrait  1.0000000 0.4400044 #> domtrait 0.4400044 1.0000000 nd_dom_0_mod <- buildcompnet(presabs=ex_presabs,                         spvars_dist_int=ex_traits,                         warmup=400,                         iter=1200) #>  #> SAMPLING FOR MODEL 'srm_binomial' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 9.8e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.98 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 1200 [  0%]  (Warmup) #> Chain 1: Iteration:  120 / 1200 [ 10%]  (Warmup) #> Chain 1: Iteration:  240 / 1200 [ 20%]  (Warmup) #> Chain 1: Iteration:  360 / 1200 [ 30%]  (Warmup) #> Chain 1: Iteration:  401 / 1200 [ 33%]  (Sampling) #> Chain 1: Iteration:  520 / 1200 [ 43%]  (Sampling) #> Chain 1: Iteration:  640 / 1200 [ 53%]  (Sampling) #> Chain 1: Iteration:  760 / 1200 [ 63%]  (Sampling) #> Chain 1: Iteration:  880 / 1200 [ 73%]  (Sampling) #> Chain 1: Iteration: 1000 / 1200 [ 83%]  (Sampling) #> Chain 1: Iteration: 1120 / 1200 [ 93%]  (Sampling) #> Chain 1: Iteration: 1200 / 1200 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 1.483 seconds (Warm-up) #> Chain 1:                1.945 seconds (Sampling) #> Chain 1:                3.428 seconds (Total) #> Chain 1:  nd_dom_0_mod_gofstats <- gofstats(nd_dom_0_mod) #> Approx. completion #> 25% #> 50% #> 75% #> 100% nd_dom_0_mod_gofstats #> p.sd.rowmeans   p.cycle.dep  #>          0.07          0.87  nd_dom_0_mod_ppred <- postpredsamp(nd_dom_0_mod) fpr <- apply(nd_dom_0_mod_ppred, 1, mean) nd_dom_0_mod_dharma <- createDHARMa(simulatedResponse = nd_dom_0_mod_ppred,                                 observedResponse = nd_dom_0_mod$d$both,                                 fittedPredictedResponse = fpr,                                 integerResponse = TRUE) testDispersion(nd_dom_0_mod_dharma, plot=FALSE) #>  #>  DHARMa nonparametric dispersion test via sd of residuals fitted vs. #>  simulated #>  #> data:  simulationOutput #> dispersion = 1.8461, p-value = 0.005 #> alternative hypothesis: two.sided testQuantiles(nd_dom_0_mod_dharma, plot=FALSE) #>  #>  Test for location of quantiles via qgam #>  #> data:  nd_dom_0_mod_dharma #> p-value = 0.03696 #> alternative hypothesis: both testUniformity(nd_dom_0_mod_dharma, plot=FALSE) #>  #>  Asymptotic one-sample Kolmogorov-Smirnov test #>  #> data:  simulationOutput$scaledResiduals #> D = 0.03428, p-value = 0.9019 #> alternative hypothesis: two-sided testZeroInflation(nd_dom_0_mod_dharma, plot=FALSE) #>  #>  DHARMa zero-inflation test via comparison to expected zeros with #>  simulation under H0 = fitted model #>  #> data:  simulationOutput #> ratioObsSim = 1.0145, p-value = 0.7475 #> alternative hypothesis: two.sided nd_dom_1_mod <- buildcompnet(presabs=ex_presabs,                         spvars_dist_int=ex_traits,                         rank = 1,                         warmup=500,                         iter=1500) #>  #> SAMPLING FOR MODEL 'ame_binomial' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.00019 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 1.9 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 1500 [  0%]  (Warmup) #> Chain 1: Iteration:  150 / 1500 [ 10%]  (Warmup) #> Chain 1: Iteration:  300 / 1500 [ 20%]  (Warmup) #> Chain 1: Iteration:  450 / 1500 [ 30%]  (Warmup) #> Chain 1: Iteration:  501 / 1500 [ 33%]  (Sampling) #> Chain 1: Iteration:  650 / 1500 [ 43%]  (Sampling) #> Chain 1: Iteration:  800 / 1500 [ 53%]  (Sampling) #> Chain 1: Iteration:  950 / 1500 [ 63%]  (Sampling) #> Chain 1: Iteration: 1100 / 1500 [ 73%]  (Sampling) #> Chain 1: Iteration: 1250 / 1500 [ 83%]  (Sampling) #> Chain 1: Iteration: 1400 / 1500 [ 93%]  (Sampling) #> Chain 1: Iteration: 1500 / 1500 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 9.602 seconds (Warm-up) #> Chain 1:                19.5 seconds (Sampling) #> Chain 1:                29.102 seconds (Total) #> Chain 1:  nd_dom_1_mod_gofstats <- gofstats(nd_dom_1_mod) #> Approx. completion #> 25% #> 50% #> 75% #> 100% nd_dom_1_mod_gofstats #> p.sd.rowmeans   p.cycle.dep  #>    0.06666667    0.75000000  nd_dom_1_mod_ppred <- compnet::postpredsamp(nd_dom_1_mod) fpr <- apply(nd_dom_1_mod_ppred, 1, mean) nd_dom_1_mod_dharma <- createDHARMa(simulatedResponse = nd_dom_1_mod_ppred,                                 observedResponse = nd_dom_1_mod$d$both,                                 fittedPredictedResponse = fpr,                                 integerResponse = TRUE) testDispersion(nd_dom_1_mod_dharma, plot=FALSE) #>  #>  DHARMa nonparametric dispersion test via sd of residuals fitted vs. #>  simulated #>  #> data:  simulationOutput #> dispersion = 0.84762, p-value = 0.63 #> alternative hypothesis: two.sided testQuantiles(nd_dom_1_mod_dharma, plot=FALSE) #>  #>  Test for location of quantiles via qgam #>  #> data:  nd_dom_1_mod_dharma #> p-value = 0.6353 #> alternative hypothesis: both testUniformity(nd_dom_1_mod_dharma, plot=FALSE) #>  #>  Asymptotic one-sample Kolmogorov-Smirnov test #>  #> data:  simulationOutput$scaledResiduals #> D = 0.048878, p-value = 0.5247 #> alternative hypothesis: two-sided testZeroInflation(nd_dom_1_mod_dharma, plot=FALSE) #>  #>  DHARMa zero-inflation test via comparison to expected zeros with #>  simulation under H0 = fitted model #>  #> data:  simulationOutput #> ratioObsSim = 1.0031, p-value = 1 #> alternative hypothesis: two.sided summarize_compnet(nd_1_mod) #>                    Mean       2.5%      97.5% #> intercept    -5.2180266 -5.9962679 -4.4759117 #> ndtrait_dist  0.8173614  0.5271659  1.1225552 #> ndtrait_sp    0.1136006 -0.2556542  0.4777447 summarize_compnet(nd_dom_1_mod) #>                      Mean        2.5%      97.5% #> intercept     -4.33849826 -5.09764215 -3.7070712 #> ndtrait_dist   1.06026199  0.75137317  1.3872365 #> domtrait_dist -1.10457624 -1.43491627 -0.7454997 #> ndtrait_sp    -0.08073132 -0.37585869  0.2089092 #> domtrait_sp    0.25293591 -0.08168505  0.5914871 scatter_interaction(nd_1_mod, xvar=\"ndtrait\", xlabel=\"ND Trait\") scatter_interaction(nd_dom_1_mod, xvar=\"ndtrait\", xlabel=\"ND Trait\")"},{"path":"https://kyle-rosenblad.github.io/compnet/articles/compnet_workflow.html","id":"phylogenetic-distance-model-8-15-min-","dir":"Articles","previous_headings":"","what":"Phylogenetic distance model (8-15 min.)","title":"compnet_workflow","text":"Sometimes might trait data, might sure traits make sense use models. think phylogenetic distance serves reasonable proxy resource use overlap, use phylogenetic distance predictor ‘compnet’ model. Let’s try approach example data set. First, ’ll load phylogenetic distance data look . Rows represent species pairs. addition phylodist column, two columns containing unique species names pair. names must match names presence-absence matrix. Let’s build model now. Phylogenetic distance species-pair-level variable (species-level variable), ’ll tell buildcompnet() want use ‘ex_phylo’ ‘pairvars’ argument. Since already know increase model rank, ’ll skip rank produces acceptable model-check results. Run model checks: ’ve got problems overdispersion quantile deviations. Let’s try ‘rank’ = 1. Run model checks: Looks good! Let’s visualize results:   much effect. can regard warning phylogenetic distance may always ideal proxy resource use overlap.","code":"data(\"ex_phylo\") head(ex_phylo) #>   spAid spBid phylodist #> 1   sp1   sp2  1.486439 #> 2   sp1   sp3  3.160156 #> 3   sp1   sp4  3.160968 #> 4   sp1   sp5  2.671681 #> 5   sp1   sp6  2.302756 #> 6   sp1   sp7  3.061021 phylo_0_mod <- buildcompnet(presabs=ex_presabs,                             pairvars=ex_phylo,                             warmup=400,                             iter=1200) #>  #> SAMPLING FOR MODEL 'srm_binomial' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 9.7e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.97 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 1200 [  0%]  (Warmup) #> Chain 1: Iteration:  120 / 1200 [ 10%]  (Warmup) #> Chain 1: Iteration:  240 / 1200 [ 20%]  (Warmup) #> Chain 1: Iteration:  360 / 1200 [ 30%]  (Warmup) #> Chain 1: Iteration:  401 / 1200 [ 33%]  (Sampling) #> Chain 1: Iteration:  520 / 1200 [ 43%]  (Sampling) #> Chain 1: Iteration:  640 / 1200 [ 53%]  (Sampling) #> Chain 1: Iteration:  760 / 1200 [ 63%]  (Sampling) #> Chain 1: Iteration:  880 / 1200 [ 73%]  (Sampling) #> Chain 1: Iteration: 1000 / 1200 [ 83%]  (Sampling) #> Chain 1: Iteration: 1120 / 1200 [ 93%]  (Sampling) #> Chain 1: Iteration: 1200 / 1200 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 1.38 seconds (Warm-up) #> Chain 1:                1.915 seconds (Sampling) #> Chain 1:                3.295 seconds (Total) #> Chain 1: #> Warning: The largest R-hat is 1.06, indicating chains have not mixed. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#r-hat #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess gofstats(phylo_0_mod) #> Approx. completion #> 25% #> 50% #> 75% #> 100% #> p.sd.rowmeans   p.cycle.dep  #>     0.0400000     0.1266667  phylo_0_mod_ppred <- postpredsamp(phylo_0_mod) fpr <- apply(phylo_0_mod_ppred, 1, mean) phylo_0_mod_dharma <- createDHARMa(simulatedResponse = phylo_0_mod_ppred,                                 observedResponse = phylo_0_mod$d$both,                                 fittedPredictedResponse = fpr,                                 integerResponse = TRUE) testDispersion(phylo_0_mod_dharma, plot=FALSE) #>  #>  DHARMa nonparametric dispersion test via sd of residuals fitted vs. #>  simulated #>  #> data:  simulationOutput #> dispersion = 2.0519, p-value < 2.2e-16 #> alternative hypothesis: two.sided testQuantiles(phylo_0_mod_dharma, plot=FALSE) #> qu = 0.75, log(sigma) = -2.131418 : outer Newton did not converge fully. #> qu = 0.75, log(sigma) = -2.19894 : outer Newton did not converge fully. #> Warning in newton(lsp = lsp, X = G$X, y = G$y, Eb = G$Eb, UrS = G$UrS, L = G$L, #> : Fitting terminated with step failure - check results carefully #>  #>  Test for location of quantiles via qgam #>  #> data:  phylo_0_mod_dharma #> p-value = 0.0001623 #> alternative hypothesis: both testUniformity(phylo_0_mod_dharma, plot=FALSE) #>  #>  Asymptotic one-sample Kolmogorov-Smirnov test #>  #> data:  simulationOutput$scaledResiduals #> D = 0.063992, p-value = 0.2084 #> alternative hypothesis: two-sided testZeroInflation(phylo_0_mod_dharma, plot=FALSE) #>  #>  DHARMa zero-inflation test via comparison to expected zeros with #>  simulation under H0 = fitted model #>  #> data:  simulationOutput #> ratioObsSim = 1.0392, p-value = 0.3375 #> alternative hypothesis: two.sided phylo_1_mod <- buildcompnet(presabs=ex_presabs,                             pairvars=ex_phylo,                             rank=1,                             warmup=500,                             iter=1500,                             adapt_delta=0.9) #>  #> SAMPLING FOR MODEL 'ame_binomial' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000184 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 1.84 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 1500 [  0%]  (Warmup) #> Chain 1: Iteration:  150 / 1500 [ 10%]  (Warmup) #> Chain 1: Iteration:  300 / 1500 [ 20%]  (Warmup) #> Chain 1: Iteration:  450 / 1500 [ 30%]  (Warmup) #> Chain 1: Iteration:  501 / 1500 [ 33%]  (Sampling) #> Chain 1: Iteration:  650 / 1500 [ 43%]  (Sampling) #> Chain 1: Iteration:  800 / 1500 [ 53%]  (Sampling) #> Chain 1: Iteration:  950 / 1500 [ 63%]  (Sampling) #> Chain 1: Iteration: 1100 / 1500 [ 73%]  (Sampling) #> Chain 1: Iteration: 1250 / 1500 [ 83%]  (Sampling) #> Chain 1: Iteration: 1400 / 1500 [ 93%]  (Sampling) #> Chain 1: Iteration: 1500 / 1500 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 13.218 seconds (Warm-up) #> Chain 1:                28.374 seconds (Sampling) #> Chain 1:                41.592 seconds (Total) #> Chain 1: gofstats(phylo_1_mod) #> Approx. completion #> 25% #> 50% #> 75% #> 100% #> p.sd.rowmeans   p.cycle.dep  #>     0.1000000     0.4866667  phylo_1_mod_ppred <- postpredsamp(phylo_1_mod) fpr <- apply(phylo_1_mod_ppred, 1, mean) phylo_1_mod_dharma <- createDHARMa(simulatedResponse = phylo_1_mod_ppred,                                 observedResponse = phylo_1_mod$d$both,                                 fittedPredictedResponse = fpr,                                 integerResponse = TRUE) testDispersion(phylo_1_mod_dharma, plot=FALSE) #>  #>  DHARMa nonparametric dispersion test via sd of residuals fitted vs. #>  simulated #>  #> data:  simulationOutput #> dispersion = 0.98223, p-value = 0.926 #> alternative hypothesis: two.sided testQuantiles(phylo_1_mod_dharma, plot=FALSE) #>  #>  Test for location of quantiles via qgam #>  #> data:  phylo_1_mod_dharma #> p-value = 0.3023 #> alternative hypothesis: both testUniformity(phylo_1_mod_dharma, plot=FALSE) #>  #>  Asymptotic one-sample Kolmogorov-Smirnov test #>  #> data:  simulationOutput$scaledResiduals #> D = 0.062905, p-value = 0.2248 #> alternative hypothesis: two-sided testZeroInflation(phylo_1_mod_dharma, plot=FALSE) #>  #>  DHARMa zero-inflation test via comparison to expected zeros with #>  simulation under H0 = fitted model #>  #> data:  simulationOutput #> ratioObsSim = 1.0251, p-value = 0.58 #> alternative hypothesis: two.sided fixedeff_violins(phylo_1_mod) scatter_pairvar(phylo_1_mod, xvar=\"phylodist\", xlabel=\"Phylogenetic Distance\")"},{"path":"https://kyle-rosenblad.github.io/compnet/articles/compnet_workflow.html","id":"alternative-distributions","dir":"Articles","previous_headings":"","what":"Alternative distributions","title":"compnet_workflow","text":"alternatives binomial likelihood, ‘compnet’ models can also built beta-binomial zero-inflated binomial likelihoods changing ‘family’ argument buildcompnet(). options can sometimes help resolve kinds problems ‘DHARMa’ checks reveal, like overdispersion zero-inflation. turning fancy solutions like , ’s often worthwhile rethink choices predictor variables. However, doesn’t always work, ’s nice fancier model structures available case need .","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kyle Rosenblad. Author, maintainer.","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rosenblad K (2024). compnet: Network Models Interspecific Competition. R package version 0.0.0.9000, https://kyle-rosenblad.github.io/compnet/.","code":"@Manual{,   title = {compnet: Network Models of Interspecific Competition},   author = {Kyle Rosenblad},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://kyle-rosenblad.github.io/compnet/}, }"},{"path":"https://kyle-rosenblad.github.io/compnet/reference/buildcompnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Network models of interspecific competition with presence-absence data — buildcompnet","title":"Network models of interspecific competition with presence-absence data — buildcompnet","text":"Network models interspecific competition presence-absence data","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/buildcompnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Network models of interspecific competition with presence-absence data — buildcompnet","text":"","code":"buildcompnet(   presabs,   spvars_no_int = NULL,   spvars_dist_int = NULL,   spvars_multi_int = NULL,   pairvars = NULL,   family = \"binomial\",   rank = 0,   prior_intercept_scale = 5,   prior_betas_scale = 5,   prior_sigma_addeff_rate = 1,   prior_multi_cholesky_eta = 5,   prior_sigma_multi_shape = 1,   prior_sigma_multi_scale = 1,   prior_lambda_scale = 5,   prior_phi_rate = 1,   warmup = 1000,   iter = 2000,   adapt_delta = 0.8 )"},{"path":"https://kyle-rosenblad.github.io/compnet/reference/buildcompnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Network models of interspecific competition with presence-absence data — buildcompnet","text":"presabs Must specified user. Binary (0 1) presence-absence matrix sites rows species columns. Column names unique species names. spvars_no_int matrix data frame, rows species columns traits included model additive species effects , interaction term. Row names unique species names, column names unique trait names. spvars_dist_int matrix data frame, rows species columns traits included model distance interaction term (.e., absolute value difference trait values species pair). Row names unique species names, column names unique trait names. spvars_multi_int matrix data frame, rows species columns traits included model multiplicative interaction term (.e., product trait values species pair). Row names unique species names, column names unique trait names. pairvars matrix data frame, rows species pairs columns pair-level traits species-level analog, e.g., phylogenetic distance. Row names unique species names, column names unique trait names. also two columns named \"spAid\" \"spBid\" containing unique names species pair. family Distribution family likelihood. Binomial, beta-binomial, zero-inflated binomial currently supported. rank Number dimensions multiplicative latent factor term. Rank=0 (default) yields model multiplicative term. prior_intercept_scale Scale parameter mean-zero Gaussian prior intercept term linear predictor. prior_betas_scale Scale parameter mean-zero Gaussian priors coefficients fixed effect terms linear predictor. prior_sigma_addeff_rate Rate parameter exponential prior scale species-level Gaussian random effects (.e., \"row column effects\"). prior_multi_cholesky_eta Eta parameter Cholesky LKJ prior determining correlations among latent factors. Larger values imply greater skepticism strong correlations. prior_sigma_multi_shape Shape parameter gamma prior scale multiplicative latent factor effects. prior_sigma_multi_scale Scale parameter gamma prior scale multiplicative latent factor effects. prior_lambda_scale Scale parameter mean-zero Gaussian prior diagonal values Lambda, matrix determines different species' values latent factors interact linear predictor. prior_phi_rate Rate parameter exponential prior phi, \"/-dispersion parameter\" beta-binomial models. warmup Number warmup iterations Stan. iter Number posterior sampling iterations Stan. adapt_delta parameter tunes Stan's posterior sampling algorithm. Increasing closer 1 can help avoid divergent transitions.","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/buildcompnet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Network models of interspecific competition with presence-absence data — buildcompnet","text":"Object class \"compnet\", list containing stanfit model object, named list posterior samples model parameters, data frame containing input variables model, matrix dyadic X variables, matrix X variables pertaining species pair, matrix X variables pertaining species B pair, character string denoting distribution family, --relevant--matrix means standard deviations input trait data centering scaling.","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/buildcompnet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Network models of interspecific competition with presence-absence data — buildcompnet","text":"function uses Stan, accessed rstan package, build network regression model interspecific competitive niche differentiation Bayesian framework. function designed test hypothesis species likely co-occur species functionally dissimilar. Functional dissimilarity can represented directly traits proxy like phylogenetic distance. core input data species--site presence-absence matrix one species-level traits (e.g., plant leaf size) pair-level traits (e.g., phylogenetic distance). Units analysis species pairs. response variable can follow binomial, beta-binomial, zero-inflated binomial distribution. number trials number sites occupied least one species pair, number successes number sites occupied species. species-level traits used, trait can non-interacting (.e., interaction term species 's trait value species B's), interacting via typical multiplicative term, interacting via absolute value difference (.e., \"distance\") term. interaction terms key core hypothesis. competitive niche differentiation occurring, probability co-occurrence expected increase trait phylogenetic distance species B, product trait values, multiplicative interaction specified instead distance interaction. Random effects used account additive species-level dependencies , optionally, higher-order dependencies involving multiple species (e.g., \"enemy enemy friend\"). Higher-order dependencies modeled using number latent variable specified \"rank\". details random effects, see Hoff, P. (2021) Additive multiplicative effects network models. Stat. Sci. 36, 34–50.","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/buildcompnet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Network models of interspecific competition with presence-absence data — buildcompnet","text":"","code":"data(ex_presabs) data(ex_traits)  # Quick demo run. Will prompt warnings. # Run with default warmup and iter for good posterior sampling. ex_compnet <- buildcompnet(presabs=ex_presabs, spvars_dist_int=ex_traits, warmup=10, iter=20) #>  #> SAMPLING FOR MODEL 'srm_binomial' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000127 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 1.27 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: WARNING: No variance estimation is #> Chain 1:          performed for num_warmup < 20 #> Chain 1:  #> Chain 1: Iteration:  1 / 20 [  5%]  (Warmup) #> Chain 1: Iteration:  2 / 20 [ 10%]  (Warmup) #> Chain 1: Iteration:  4 / 20 [ 20%]  (Warmup) #> Chain 1: Iteration:  6 / 20 [ 30%]  (Warmup) #> Chain 1: Iteration:  8 / 20 [ 40%]  (Warmup) #> Chain 1: Iteration: 10 / 20 [ 50%]  (Warmup) #> Chain 1: Iteration: 11 / 20 [ 55%]  (Sampling) #> Chain 1: Iteration: 12 / 20 [ 60%]  (Sampling) #> Chain 1: Iteration: 14 / 20 [ 70%]  (Sampling) #> Chain 1: Iteration: 16 / 20 [ 80%]  (Sampling) #> Chain 1: Iteration: 18 / 20 [ 90%]  (Sampling) #> Chain 1: Iteration: 20 / 20 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.046 seconds (Warm-up) #> Chain 1:                0.054 seconds (Sampling) #> Chain 1:                0.1 seconds (Total) #> Chain 1:  #> Warning: There were 1 chains where the estimated Bayesian Fraction of Missing Information was low. See #> https://mc-stan.org/misc/warnings.html#bfmi-low #> Warning: Examine the pairs() plot to diagnose sampling problems #> Warning: The largest R-hat is 2.12, indicating chains have not mixed. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#r-hat #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess"},{"path":"https://kyle-rosenblad.github.io/compnet/reference/compnet.html","id":null,"dir":"Reference","previous_headings":"","what":"The 'compnet' package. — compnet","title":"The 'compnet' package. — compnet","text":"DESCRIPTION PACKAGE","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/compnet.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The 'compnet' package. — compnet","text":"Stan Development Team (NA). RStan: R interface Stan. R package version 2.32.3. https://mc-stan.org","code":""},{"path":[]},{"path":"https://kyle-rosenblad.github.io/compnet/reference/compnet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The 'compnet' package. — compnet","text":"Maintainer: Kyle Rosenblad kyle_rosenblad@berkeley.edu (ORCID)","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/compute_gofstats.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute summary statistics quantifying row/column-level and third order dependencies in a\nsymmetric matrix with NA diagonals — compute_gofstats","title":"Compute summary statistics quantifying row/column-level and third order dependencies in a\nsymmetric matrix with NA diagonals — compute_gofstats","text":"Compute summary statistics quantifying row/column-level third order dependencies symmetric matrix NA diagonals","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/compute_gofstats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute summary statistics quantifying row/column-level and third order dependencies in a\nsymmetric matrix with NA diagonals — compute_gofstats","text":"","code":"compute_gofstats(Y)"},{"path":"https://kyle-rosenblad.github.io/compnet/reference/compute_gofstats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute summary statistics quantifying row/column-level and third order dependencies in a\nsymmetric matrix with NA diagonals — compute_gofstats","text":"Y symmetric matrix NA diagonals","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/compute_gofstats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute summary statistics quantifying row/column-level and third order dependencies in a\nsymmetric matrix with NA diagonals — compute_gofstats","text":"named vector containing: 1- standard deviation row means, 2- triadic dependency metric used Hoff, Fosdick, & Volfovsky's \"amen\" package.","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/compute_gofstats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute summary statistics quantifying row/column-level and third order dependencies in a\nsymmetric matrix with NA diagonals — compute_gofstats","text":"","code":"data(ex_presabs) data(ex_traits)  # Quick demo run. Will prompt warnings. # Run with default warmup and iter for good posterior sampling. ex_compnet <- buildcompnet(presabs=ex_presabs, spvars_dist_int=ex_traits, warmup=10, iter=20) #>  #> SAMPLING FOR MODEL 'srm_binomial' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.0001 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 1 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: WARNING: No variance estimation is #> Chain 1:          performed for num_warmup < 20 #> Chain 1:  #> Chain 1: Iteration:  1 / 20 [  5%]  (Warmup) #> Chain 1: Iteration:  2 / 20 [ 10%]  (Warmup) #> Chain 1: Iteration:  4 / 20 [ 20%]  (Warmup) #> Chain 1: Iteration:  6 / 20 [ 30%]  (Warmup) #> Chain 1: Iteration:  8 / 20 [ 40%]  (Warmup) #> Chain 1: Iteration: 10 / 20 [ 50%]  (Warmup) #> Chain 1: Iteration: 11 / 20 [ 55%]  (Sampling) #> Chain 1: Iteration: 12 / 20 [ 60%]  (Sampling) #> Chain 1: Iteration: 14 / 20 [ 70%]  (Sampling) #> Chain 1: Iteration: 16 / 20 [ 80%]  (Sampling) #> Chain 1: Iteration: 18 / 20 [ 90%]  (Sampling) #> Chain 1: Iteration: 20 / 20 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.005 seconds (Warm-up) #> Chain 1:                0.054 seconds (Sampling) #> Chain 1:                0.059 seconds (Total) #> Chain 1:  #> Warning: There were 1 chains where the estimated Bayesian Fraction of Missing Information was low. See #> https://mc-stan.org/misc/warnings.html#bfmi-low #> Warning: Examine the pairs() plot to diagnose sampling problems #> Warning: The largest R-hat is 2.12, indicating chains have not mixed. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#r-hat #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess  ex_compnet_summ <- summarize_compnet(ex_compnet) ex_compnet_summ #>                      Mean       2.5%      97.5% #> intercept     -4.46262897 -5.1437108 -3.5657248 #> ndtrait_dist   1.11157337  0.7596140  1.4977043 #> domtrait_dist -1.09340703 -1.3675243 -0.8847900 #> ndtrait_sp    -0.04424746 -0.4043993  0.2595910 #> domtrait_sp    0.25560849  0.1032599  0.4925959"},{"path":"https://kyle-rosenblad.github.io/compnet/reference/ex_phylo.html","id":null,"dir":"Reference","previous_headings":"","what":"Phylogenetic distance between species pairs in a simulated metacommunity dataset with 24 species — ex_phylo","title":"Phylogenetic distance between species pairs in a simulated metacommunity dataset with 24 species — ex_phylo","text":"data frame 276 rows 3 columns: spAid ID species pair spBid ID species B pair phylodist Phylogenetic distance species pair","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/ex_phylo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Phylogenetic distance between species pairs in a simulated metacommunity dataset with 24 species — ex_phylo","text":"","code":"ex_phylo"},{"path":"https://kyle-rosenblad.github.io/compnet/reference/ex_phylo.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Phylogenetic distance between species pairs in a simulated metacommunity dataset with 24 species — ex_phylo","text":"object class data.frame 276 rows 3 columns.","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/ex_presabs.html","id":null,"dir":"Reference","previous_headings":"","what":"A simulated metacommunity presence-absence matrix in which rows represent sites and columns represent species — ex_presabs","title":"A simulated metacommunity presence-absence matrix in which rows represent sites and columns represent species — ex_presabs","text":"Matrix 100 rows 24 columns containing 0 (absence) 1 (presence)","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/ex_presabs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A simulated metacommunity presence-absence matrix in which rows represent sites and columns represent species — ex_presabs","text":"","code":"ex_presabs"},{"path":"https://kyle-rosenblad.github.io/compnet/reference/ex_presabs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A simulated metacommunity presence-absence matrix in which rows represent sites and columns represent species — ex_presabs","text":"object class matrix (inherits array) 100 rows 24 columns.","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/ex_traits.html","id":null,"dir":"Reference","previous_headings":"","what":"Species-level data for two traits in a simulated metacommunity dataset with 24 species — ex_traits","title":"Species-level data for two traits in a simulated metacommunity dataset with 24 species — ex_traits","text":"data frame 24 rows 2 columns: ndtrait trait driving competitive niche differentiation domtrait trait influencing competitive ability","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/ex_traits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Species-level data for two traits in a simulated metacommunity dataset with 24 species — ex_traits","text":"","code":"ex_traits"},{"path":"https://kyle-rosenblad.github.io/compnet/reference/ex_traits.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Species-level data for two traits in a simulated metacommunity dataset with 24 species — ex_traits","text":"object class data.frame 24 rows 2 columns.","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/expit.html","id":null,"dir":"Reference","previous_headings":"","what":"Inverse logit function — expit","title":"Inverse logit function — expit","text":"Inverse logit function","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/expit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inverse logit function — expit","text":"","code":"expit(x)"},{"path":"https://kyle-rosenblad.github.io/compnet/reference/expit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inverse logit function — expit","text":"x numeric value, vector array numeric values.","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/expit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inverse logit function — expit","text":"inverse-logit(s) supplied numeric value(s).","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/expit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inverse logit function — expit","text":"","code":"expit(-1) #> [1] 0.2689414  exvec <- c(-2:2) expit(exvec) #> [1] 0.1192029 0.2689414 0.5000000 0.7310586 0.8807971  exmat <- matrix(c(1:12), nrow=3) expit(exmat) #>           [,1]      [,2]      [,3]      [,4] #> [1,] 0.7310586 0.9820138 0.9990889 0.9999546 #> [2,] 0.8807971 0.9933071 0.9996646 0.9999833 #> [3,] 0.9525741 0.9975274 0.9998766 0.9999939"},{"path":"https://kyle-rosenblad.github.io/compnet/reference/fixedeff_violins.html","id":null,"dir":"Reference","previous_headings":"","what":"Violin plots of fixed effect coefficients in a compnet model — fixedeff_violins","title":"Violin plots of fixed effect coefficients in a compnet model — fixedeff_violins","text":"Violin plots fixed effect coefficients compnet model","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/fixedeff_violins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Violin plots of fixed effect coefficients in a compnet model — fixedeff_violins","text":"","code":"fixedeff_violins(mod)"},{"path":"https://kyle-rosenblad.github.io/compnet/reference/fixedeff_violins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Violin plots of fixed effect coefficients in a compnet model — fixedeff_violins","text":"mod object class \"compnet\" created buildcompnet() function.","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/fixedeff_violins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Violin plots of fixed effect coefficients in a compnet model — fixedeff_violins","text":"ggplot2 graphic showing violin plots standarized effect sizes fixed effects compnet model.","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/fixedeff_violins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Violin plots of fixed effect coefficients in a compnet model — fixedeff_violins","text":"","code":"data(ex_presabs) data(ex_traits)  # Quick demo run. Will prompt warnings. # Run with default warmup and iter for good posterior sampling. ex_compnet <- buildcompnet(presabs=ex_presabs, spvars_dist_int=ex_traits, warmup=10, iter=20) #>  #> SAMPLING FOR MODEL 'srm_binomial' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 9.7e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.97 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: WARNING: No variance estimation is #> Chain 1:          performed for num_warmup < 20 #> Chain 1:  #> Chain 1: Iteration:  1 / 20 [  5%]  (Warmup) #> Chain 1: Iteration:  2 / 20 [ 10%]  (Warmup) #> Chain 1: Iteration:  4 / 20 [ 20%]  (Warmup) #> Chain 1: Iteration:  6 / 20 [ 30%]  (Warmup) #> Chain 1: Iteration:  8 / 20 [ 40%]  (Warmup) #> Chain 1: Iteration: 10 / 20 [ 50%]  (Warmup) #> Chain 1: Iteration: 11 / 20 [ 55%]  (Sampling) #> Chain 1: Iteration: 12 / 20 [ 60%]  (Sampling) #> Chain 1: Iteration: 14 / 20 [ 70%]  (Sampling) #> Chain 1: Iteration: 16 / 20 [ 80%]  (Sampling) #> Chain 1: Iteration: 18 / 20 [ 90%]  (Sampling) #> Chain 1: Iteration: 20 / 20 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.049 seconds (Warm-up) #> Chain 1:                0.05 seconds (Sampling) #> Chain 1:                0.099 seconds (Total) #> Chain 1:  #> Warning: The largest R-hat is 2.12, indicating chains have not mixed. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#r-hat #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess fixedeff_violins(ex_compnet)"},{"path":"https://kyle-rosenblad.github.io/compnet/reference/gofstats.html","id":null,"dir":"Reference","previous_headings":"","what":"Report quantiles of gofstats values for observed data relative to posterior predictive distribution — gofstats","title":"Report quantiles of gofstats values for observed data relative to posterior predictive distribution — gofstats","text":"Report quantiles gofstats values observed data relative posterior predictive distribution","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/gofstats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report quantiles of gofstats values for observed data relative to posterior predictive distribution — gofstats","text":"","code":"gofstats(mod, thin = T, thin_to = 300)"},{"path":"https://kyle-rosenblad.github.io/compnet/reference/gofstats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report quantiles of gofstats values for observed data relative to posterior predictive distribution — gofstats","text":"mod object class \"compnet\" created buildcompnet() function. thin Logical value indicating whether take random subsample posterior draws. thin_to Logical value indicating size subsample take thin=TRUE.","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/gofstats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report quantiles of gofstats values for observed data relative to posterior predictive distribution — gofstats","text":"named vector containing quantiles interval \\([0,1]\\) : 1- standard deviation row means, 2- triadic dependency metric used Hoff, Fosdick, & Volfovsky's \"amen\" package. values represent proportion posterior predictive simulation less value observed data.","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/gofstats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Report quantiles of gofstats values for observed data relative to posterior predictive distribution — gofstats","text":"function can used assess whether species-level higher-order dependencies data represented adequately model structure. Extreme output values indicate may problem. cases, may help use different fixed effect predictors, increase model rank.","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/gofstats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Report quantiles of gofstats values for observed data relative to posterior predictive distribution — gofstats","text":"","code":"data(ex_presabs) data(ex_traits)  # Quick demo run. Will prompt warnings. # Run with default warmup and iter for good posterior sampling. ex_compnet <- buildcompnet(presabs=ex_presabs, spvars_dist_int=ex_traits, warmup=10, iter=20) #>  #> SAMPLING FOR MODEL 'srm_binomial' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 9.5e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.95 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: WARNING: No variance estimation is #> Chain 1:          performed for num_warmup < 20 #> Chain 1:  #> Chain 1: Iteration:  1 / 20 [  5%]  (Warmup) #> Chain 1: Iteration:  2 / 20 [ 10%]  (Warmup) #> Chain 1: Iteration:  4 / 20 [ 20%]  (Warmup) #> Chain 1: Iteration:  6 / 20 [ 30%]  (Warmup) #> Chain 1: Iteration:  8 / 20 [ 40%]  (Warmup) #> Chain 1: Iteration: 10 / 20 [ 50%]  (Warmup) #> Chain 1: Iteration: 11 / 20 [ 55%]  (Sampling) #> Chain 1: Iteration: 12 / 20 [ 60%]  (Sampling) #> Chain 1: Iteration: 14 / 20 [ 70%]  (Sampling) #> Chain 1: Iteration: 16 / 20 [ 80%]  (Sampling) #> Chain 1: Iteration: 18 / 20 [ 90%]  (Sampling) #> Chain 1: Iteration: 20 / 20 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.028 seconds (Warm-up) #> Chain 1:                0.047 seconds (Sampling) #> Chain 1:                0.075 seconds (Total) #> Chain 1:  #> Warning: The largest R-hat is 2.12, indicating chains have not mixed. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#r-hat #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess  gofstats(ex_compnet) #> Approx. completion #> 50% #> 100% #> p.sd.rowmeans   p.cycle.dep  #>           0.2           0.9"},{"path":"https://kyle-rosenblad.github.io/compnet/reference/postpredsamp.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate posterior predictive samples from a compnet model — postpredsamp","title":"Simulate posterior predictive samples from a compnet model — postpredsamp","text":"Simulate posterior predictive samples compnet model","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/postpredsamp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate posterior predictive samples from a compnet model — postpredsamp","text":"","code":"postpredsamp(mod)"},{"path":"https://kyle-rosenblad.github.io/compnet/reference/postpredsamp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate posterior predictive samples from a compnet model — postpredsamp","text":"mod Object class \"compnet\", created buildcompnet() function.","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/postpredsamp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate posterior predictive samples from a compnet model — postpredsamp","text":"matrix posterior predictive samples row observation column sample.","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/postpredsamp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate posterior predictive samples from a compnet model — postpredsamp","text":"","code":"data(ex_presabs) data(ex_traits)  # Quick demo run. Will prompt warnings. # Run with default warmup and iter for good posterior sampling. ex_compnet <- buildcompnet(presabs=ex_presabs, spvars_dist_int=ex_traits, warmup=10, iter=20) #>  #> SAMPLING FOR MODEL 'srm_binomial' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 9.5e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.95 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: WARNING: No variance estimation is #> Chain 1:          performed for num_warmup < 20 #> Chain 1:  #> Chain 1: Iteration:  1 / 20 [  5%]  (Warmup) #> Chain 1: Iteration:  2 / 20 [ 10%]  (Warmup) #> Chain 1: Iteration:  4 / 20 [ 20%]  (Warmup) #> Chain 1: Iteration:  6 / 20 [ 30%]  (Warmup) #> Chain 1: Iteration:  8 / 20 [ 40%]  (Warmup) #> Chain 1: Iteration: 10 / 20 [ 50%]  (Warmup) #> Chain 1: Iteration: 11 / 20 [ 55%]  (Sampling) #> Chain 1: Iteration: 12 / 20 [ 60%]  (Sampling) #> Chain 1: Iteration: 14 / 20 [ 70%]  (Sampling) #> Chain 1: Iteration: 16 / 20 [ 80%]  (Sampling) #> Chain 1: Iteration: 18 / 20 [ 90%]  (Sampling) #> Chain 1: Iteration: 20 / 20 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.071 seconds (Warm-up) #> Chain 1:                0.05 seconds (Sampling) #> Chain 1:                0.121 seconds (Total) #> Chain 1:  #> Warning: The largest R-hat is 2.12, indicating chains have not mixed. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#r-hat #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess ex_compnet_pps <- postpredsamp(ex_compnet)"},{"path":"https://kyle-rosenblad.github.io/compnet/reference/rbetabinom.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate draws from a beta-binomial distribution — rbetabinom","title":"Simulate draws from a beta-binomial distribution — rbetabinom","text":"Simulate draws beta-binomial distribution","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/rbetabinom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate draws from a beta-binomial distribution — rbetabinom","text":"","code":"rbetabinom(n, size, prob, phi)"},{"path":"https://kyle-rosenblad.github.io/compnet/reference/rbetabinom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate draws from a beta-binomial distribution — rbetabinom","text":"n Integer value: number samples draw. size Integer value: number trials sample. prob Vector, matrix, array real values specifying probability success. phi Real value: \"/- dispersion parameter\" beta-binomial likelihood. parameterization, latent beta variable shape \\(\\mu\\phi\\) scale \\((1-\\mu)\\phi\\), \\(\\mu\\) probability success binomial distribution.","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/rbetabinom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate draws from a beta-binomial distribution — rbetabinom","text":"vector draws specified beta-binomial distribution.","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/rbetabinom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate draws from a beta-binomial distribution — rbetabinom","text":"","code":"bbdraws <- rbetabinom(n=100, size=10, prob=0.3, phi=2)"},{"path":"https://kyle-rosenblad.github.io/compnet/reference/scatter_interaction.html","id":null,"dir":"Reference","previous_headings":"","what":"Make an automated plot of the interactive effect of two species' values of the same trait. — scatter_interaction","title":"Make an automated plot of the interactive effect of two species' values of the same trait. — scatter_interaction","text":"Make automated plot interactive effect two species' values trait.","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/scatter_interaction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make an automated plot of the interactive effect of two species' values of the same trait. — scatter_interaction","text":"","code":"scatter_interaction(   mod,   xvar,   xlabel,   orig.scale = T,   intlevels = c(0.05, 0.5, 0.95),   ymin = 0,   ymax = 1,   ci_width = 0.95,   grid_size = 100,   thin = TRUE,   thin_to = 100 )"},{"path":"https://kyle-rosenblad.github.io/compnet/reference/scatter_interaction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make an automated plot of the interactive effect of two species' values of the same trait. — scatter_interaction","text":"mod object class \"compnet\" created buildcompnet() function. xvar Character string name trait used. Must match trait name input data used build model. xlabel Optional character string replace xvar plotting. orig.scale Logical value indicating whether back-transform trait data original scale (T) leave mean zero unit variance (F). intlevels Vector real values interval \\([0,1]\\) indicating levels x variable condition species B plotting species 's mean response. ymin Real number indicating location bottom plot's y axis. ymax Real number indicating location top plot's y axis. ci_width real number (0,1) describing desired widths credible bands. Defaults 0.95. grid_size positive integer defining number discrete steps use approximating shape mean prediction curves credible bands. Defaults 100. thin Logical value determining whether use random subsample full posterior sample. thin_to Integer value determining many random samples draw full posterior sample thin=TRUE.","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/scatter_interaction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make an automated plot of the interactive effect of two species' values of the same trait. — scatter_interaction","text":"ggplot2 graphic.","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/scatter_interaction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make an automated plot of the interactive effect of two species' values of the same trait. — scatter_interaction","text":"","code":"data(ex_presabs) data(ex_traits)  # Quick demo run. Will prompt warnings. # Run with default warmup and iter for good posterior sampling. ex_compnet <- buildcompnet(presabs=ex_presabs, spvars_dist_int=ex_traits, warmup=10, iter=20) #>  #> SAMPLING FOR MODEL 'srm_binomial' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 9.6e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.96 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: WARNING: No variance estimation is #> Chain 1:          performed for num_warmup < 20 #> Chain 1:  #> Chain 1: Iteration:  1 / 20 [  5%]  (Warmup) #> Chain 1: Iteration:  2 / 20 [ 10%]  (Warmup) #> Chain 1: Iteration:  4 / 20 [ 20%]  (Warmup) #> Chain 1: Iteration:  6 / 20 [ 30%]  (Warmup) #> Chain 1: Iteration:  8 / 20 [ 40%]  (Warmup) #> Chain 1: Iteration: 10 / 20 [ 50%]  (Warmup) #> Chain 1: Iteration: 11 / 20 [ 55%]  (Sampling) #> Chain 1: Iteration: 12 / 20 [ 60%]  (Sampling) #> Chain 1: Iteration: 14 / 20 [ 70%]  (Sampling) #> Chain 1: Iteration: 16 / 20 [ 80%]  (Sampling) #> Chain 1: Iteration: 18 / 20 [ 90%]  (Sampling) #> Chain 1: Iteration: 20 / 20 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.073 seconds (Warm-up) #> Chain 1:                0.065 seconds (Sampling) #> Chain 1:                0.138 seconds (Total) #> Chain 1:  #> Warning: There were 1 chains where the estimated Bayesian Fraction of Missing Information was low. See #> https://mc-stan.org/misc/warnings.html#bfmi-low #> Warning: Examine the pairs() plot to diagnose sampling problems #> Warning: The largest R-hat is 2.12, indicating chains have not mixed. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#r-hat #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess plotdata <- scatter_interaction(ex_compnet, xvar=\"ndtrait\")"},{"path":"https://kyle-rosenblad.github.io/compnet/reference/scatter_interaction_getdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data for a plot of the interactive effect of two species' values of the same trait. — scatter_interaction_getdata","title":"Get data for a plot of the interactive effect of two species' values of the same trait. — scatter_interaction_getdata","text":"Get data plot interactive effect two species' values trait.","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/scatter_interaction_getdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data for a plot of the interactive effect of two species' values of the same trait. — scatter_interaction_getdata","text":"","code":"scatter_interaction_getdata(   mod,   xvar,   orig.scale = T,   intlevels = c(0.05, 0.5, 0.95),   ci_width = 0.95,   grid_size = 100,   thin = TRUE,   thin_to = 100 )"},{"path":"https://kyle-rosenblad.github.io/compnet/reference/scatter_interaction_getdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data for a plot of the interactive effect of two species' values of the same trait. — scatter_interaction_getdata","text":"mod object class \"compnet\" created buildcompnet() function. xvar Character string name trait used. Must match trait name input data used build model. orig.scale Logical value indicating whether back-transform trait data original scale (T) leave mean zero unit variance (F). intlevels Vector real values interval \\([0,1]\\) indicating levels x variable condition species B plotting species 's mean response. ci_width real number (0,1) describing desired widths credible bands. Defaults 0.95. grid_size positive integer defining number discrete steps use approximating shape mean prediction curves credible bands. Defaults 100. thin Logical value determining whether use random subsample full posterior sample. thin_to Integer value determining many random samples draw full posterior sample thin=TRUE.","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/scatter_interaction_getdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data for a plot of the interactive effect of two species' values of the same trait. — scatter_interaction_getdata","text":"data frame containing data needed plot mean curves credible bands done scatter_interaction function.","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/scatter_interaction_getdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data for a plot of the interactive effect of two species' values of the same trait. — scatter_interaction_getdata","text":"","code":"data(ex_presabs) data(ex_traits)  # Quick demo run. Will prompt warnings. # Run with default warmup and iter for good posterior sampling. ex_compnet <- buildcompnet(presabs=ex_presabs, spvars_dist_int=ex_traits, warmup=10, iter=20) #>  #> SAMPLING FOR MODEL 'srm_binomial' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 9.5e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.95 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: WARNING: No variance estimation is #> Chain 1:          performed for num_warmup < 20 #> Chain 1:  #> Chain 1: Iteration:  1 / 20 [  5%]  (Warmup) #> Chain 1: Iteration:  2 / 20 [ 10%]  (Warmup) #> Chain 1: Iteration:  4 / 20 [ 20%]  (Warmup) #> Chain 1: Iteration:  6 / 20 [ 30%]  (Warmup) #> Chain 1: Iteration:  8 / 20 [ 40%]  (Warmup) #> Chain 1: Iteration: 10 / 20 [ 50%]  (Warmup) #> Chain 1: Iteration: 11 / 20 [ 55%]  (Sampling) #> Chain 1: Iteration: 12 / 20 [ 60%]  (Sampling) #> Chain 1: Iteration: 14 / 20 [ 70%]  (Sampling) #> Chain 1: Iteration: 16 / 20 [ 80%]  (Sampling) #> Chain 1: Iteration: 18 / 20 [ 90%]  (Sampling) #> Chain 1: Iteration: 20 / 20 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.005 seconds (Warm-up) #> Chain 1:                0.046 seconds (Sampling) #> Chain 1:                0.051 seconds (Total) #> Chain 1:  #> Warning: There were 1 chains where the estimated Bayesian Fraction of Missing Information was low. See #> https://mc-stan.org/misc/warnings.html#bfmi-low #> Warning: Examine the pairs() plot to diagnose sampling problems #> Warning: The largest R-hat is 2.12, indicating chains have not mixed. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#r-hat #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess  plotdata <- scatter_interaction_getdata(ex_compnet, xvar=\"ndtrait\")"},{"path":"https://kyle-rosenblad.github.io/compnet/reference/scatter_pairvar.html","id":null,"dir":"Reference","previous_headings":"","what":"Make an automated plot of the effect of a pair-level variable like phylogenetic distance — scatter_pairvar","title":"Make an automated plot of the effect of a pair-level variable like phylogenetic distance — scatter_pairvar","text":"Make automated plot effect pair-level variable like phylogenetic distance","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/scatter_pairvar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make an automated plot of the effect of a pair-level variable like phylogenetic distance — scatter_pairvar","text":"","code":"scatter_pairvar(   mod,   xvar,   xlabel,   color = \"red\",   orig.scale = T,   ymin = 0,   ymax = 1,   ci_width = 0.95,   grid_size = 100,   thin = TRUE,   thin_to = 100 )"},{"path":"https://kyle-rosenblad.github.io/compnet/reference/scatter_pairvar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make an automated plot of the effect of a pair-level variable like phylogenetic distance — scatter_pairvar","text":"mod object class \"compnet\" created buildcompnet() function. xvar Character string name trait used. Must match trait name input data used build model. xlabel Optional character string replace xvar plotting. color Color use plotting. orig.scale Logical value indicating whether back-transform trait data original scale (T) leave mean zero unit variance (F). ymin Real number indicating location bottom plot's y axis. ymax Real number indicating location top plot's y axis. ci_width real number (0,1) describing desired widths credible band. Defaults 0.95. grid_size positive integer defining number discrete steps use approximating shape mean prediction curves credible bands. Defaults 100. thin Logical value determining whether use random subsample full posterior sample. thin_to Integer value determining many random samples draw full posterior sample thin=TRUE.","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/scatter_pairvar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make an automated plot of the effect of a pair-level variable like phylogenetic distance — scatter_pairvar","text":"ggplot2 graphic.","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/scatter_pairvar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make an automated plot of the effect of a pair-level variable like phylogenetic distance — scatter_pairvar","text":"","code":"data(ex_presabs) data(ex_phylo)  # Quick demo run. Will prompt warnings. # Run with default warmup and iter for good posterior sampling. ex_compnet_phylo <- buildcompnet(presabs=ex_presabs, pairvars=ex_phylo, warmup=10, iter=20) #>  #> SAMPLING FOR MODEL 'srm_binomial' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 9.3e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.93 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: WARNING: No variance estimation is #> Chain 1:          performed for num_warmup < 20 #> Chain 1:  #> Chain 1: Iteration:  1 / 20 [  5%]  (Warmup) #> Chain 1: Iteration:  2 / 20 [ 10%]  (Warmup) #> Chain 1: Iteration:  4 / 20 [ 20%]  (Warmup) #> Chain 1: Iteration:  6 / 20 [ 30%]  (Warmup) #> Chain 1: Iteration:  8 / 20 [ 40%]  (Warmup) #> Chain 1: Iteration: 10 / 20 [ 50%]  (Warmup) #> Chain 1: Iteration: 11 / 20 [ 55%]  (Sampling) #> Chain 1: Iteration: 12 / 20 [ 60%]  (Sampling) #> Chain 1: Iteration: 14 / 20 [ 70%]  (Sampling) #> Chain 1: Iteration: 16 / 20 [ 80%]  (Sampling) #> Chain 1: Iteration: 18 / 20 [ 90%]  (Sampling) #> Chain 1: Iteration: 20 / 20 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.022 seconds (Warm-up) #> Chain 1:                0.033 seconds (Sampling) #> Chain 1:                0.055 seconds (Total) #> Chain 1:  #> Warning: There were 1 divergent transitions after warmup. See #> https://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup #> to find out why this is a problem and how to eliminate them. #> Warning: Examine the pairs() plot to diagnose sampling problems #> Warning: The largest R-hat is 2.12, indicating chains have not mixed. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#r-hat #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess  scatter_pairvar(ex_compnet_phylo, xvar=\"phylodist\", ymax=0.25) #> Warning: Removed 14 rows containing missing values (`geom_point()`)."},{"path":"https://kyle-rosenblad.github.io/compnet/reference/scatter_pairvar_getdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data for a plot of the effect of a pair-level variable like phylogenetic distance — scatter_pairvar_getdata","title":"Get data for a plot of the effect of a pair-level variable like phylogenetic distance — scatter_pairvar_getdata","text":"Get data plot effect pair-level variable like phylogenetic distance","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/scatter_pairvar_getdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data for a plot of the effect of a pair-level variable like phylogenetic distance — scatter_pairvar_getdata","text":"","code":"scatter_pairvar_getdata(   mod,   xvar,   orig.scale = T,   ci_width = 0.95,   grid_size = 100,   thin = TRUE,   thin_to = 100 )"},{"path":"https://kyle-rosenblad.github.io/compnet/reference/scatter_pairvar_getdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data for a plot of the effect of a pair-level variable like phylogenetic distance — scatter_pairvar_getdata","text":"mod object class \"compnet\" created buildcompnet() function. xvar Character string name trait used. Must match trait name input data used build model. orig.scale Logical value indicating whether back-transform trait data original scale (T) leave mean zero unit variance (F). ci_width real number (0,1) describing desired widths credible band. Defaults 0.95. grid_size positive integer defining number discrete steps use approximating shape mean prediction curves credible bands. Defaults 100. thin Logical value determining whether use random subsample full posterior sample. thin_to Integer value determining many random samples draw full posterior sample thin=TRUE.","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/scatter_pairvar_getdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data for a plot of the effect of a pair-level variable like phylogenetic distance — scatter_pairvar_getdata","text":"ggplot2 graphic.","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/scatter_pairvar_getdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data for a plot of the effect of a pair-level variable like phylogenetic distance — scatter_pairvar_getdata","text":"","code":"data(ex_presabs) data(ex_phylo)  # Quick demo run. Will prompt warnings. # Run with default warmup and iter for good posterior sampling. ex_compnet_phylo <- buildcompnet(presabs=ex_presabs, pairvars=ex_phylo, warmup=10, iter=20) #>  #> SAMPLING FOR MODEL 'srm_binomial' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 9.3e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.93 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: WARNING: No variance estimation is #> Chain 1:          performed for num_warmup < 20 #> Chain 1:  #> Chain 1: Iteration:  1 / 20 [  5%]  (Warmup) #> Chain 1: Iteration:  2 / 20 [ 10%]  (Warmup) #> Chain 1: Iteration:  4 / 20 [ 20%]  (Warmup) #> Chain 1: Iteration:  6 / 20 [ 30%]  (Warmup) #> Chain 1: Iteration:  8 / 20 [ 40%]  (Warmup) #> Chain 1: Iteration: 10 / 20 [ 50%]  (Warmup) #> Chain 1: Iteration: 11 / 20 [ 55%]  (Sampling) #> Chain 1: Iteration: 12 / 20 [ 60%]  (Sampling) #> Chain 1: Iteration: 14 / 20 [ 70%]  (Sampling) #> Chain 1: Iteration: 16 / 20 [ 80%]  (Sampling) #> Chain 1: Iteration: 18 / 20 [ 90%]  (Sampling) #> Chain 1: Iteration: 20 / 20 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.008 seconds (Warm-up) #> Chain 1:                0.017 seconds (Sampling) #> Chain 1:                0.025 seconds (Total) #> Chain 1:  #> Warning: There were 3 divergent transitions after warmup. See #> https://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup #> to find out why this is a problem and how to eliminate them. #> Warning: There were 1 chains where the estimated Bayesian Fraction of Missing Information was low. See #> https://mc-stan.org/misc/warnings.html#bfmi-low #> Warning: Examine the pairs() plot to diagnose sampling problems #> Warning: The largest R-hat is 2.13, indicating chains have not mixed. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#r-hat #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess  scatter_pairvar_getdata(ex_compnet_phylo, xvar=\"phylodist\") #>                x       qlow      means      qhigh #> 1   -2.743471046 0.01425079 0.02132799 0.03397918 #> 2   -2.696251972 0.01428454 0.02133456 0.03393285 #> 3   -2.649032898 0.01431836 0.02134133 0.03392702 #> 4   -2.601813823 0.01435225 0.02134829 0.03392141 #> 5   -2.554594749 0.01438623 0.02135545 0.03391602 #> 6   -2.507375675 0.01442029 0.02136281 0.03391086 #> 7   -2.460156601 0.01445443 0.02137037 0.03390593 #> 8   -2.412937527 0.01448864 0.02137813 0.03390122 #> 9   -2.365718453 0.01452294 0.02138609 0.03389674 #> 10  -2.318499379 0.01455732 0.02139424 0.03389249 #> 11  -2.271280305 0.01459177 0.02140260 0.03388847 #> 12  -2.224061231 0.01462631 0.02141116 0.03388467 #> 13  -2.176842156 0.01466093 0.02141993 0.03388111 #> 14  -2.129623082 0.01469562 0.02142889 0.03387778 #> 15  -2.082404008 0.01473040 0.02143805 0.03387468 #> 16  -2.035184934 0.01476526 0.02144742 0.03387181 #> 17  -1.987965860 0.01480020 0.02145700 0.03386918 #> 18  -1.940746786 0.01483523 0.02146677 0.03386678 #> 19  -1.893527712 0.01487033 0.02147675 0.03386462 #> 20  -1.846308638 0.01490552 0.02148693 0.03386269 #> 21  -1.799089564 0.01494078 0.02149732 0.03386100 #> 22  -1.751870490 0.01497613 0.02150791 0.03385955 #> 23  -1.704651415 0.01501157 0.02151871 0.03385834 #> 24  -1.657432341 0.01504708 0.02152972 0.03385737 #> 25  -1.610213267 0.01508268 0.02154093 0.03385664 #> 26  -1.562994193 0.01511836 0.02155235 0.03385615 #> 27  -1.515775119 0.01515412 0.02156397 0.03385591 #> 28  -1.468556045 0.01518997 0.02157581 0.03385591 #> 29  -1.421336971 0.01522590 0.02158785 0.03385615 #> 30  -1.374117897 0.01526192 0.02160010 0.03385664 #> 31  -1.326898823 0.01529801 0.02161256 0.03385737 #> 32  -1.279679748 0.01533420 0.02162523 0.03385836 #> 33  -1.232460674 0.01537046 0.02163811 0.03385959 #> 34  -1.185241600 0.01540681 0.02165120 0.03386107 #> 35  -1.138022526 0.01544325 0.02166450 0.03386280 #> 36  -1.090803452 0.01547977 0.02167801 0.03386478 #> 37  -1.043584378 0.01551638 0.02169174 0.03386702 #> 38  -0.996365304 0.01555307 0.02170567 0.03386950 #> 39  -0.949146230 0.01558984 0.02171982 0.03387224 #> 40  -0.901927156 0.01562670 0.02173418 0.03387524 #> 41  -0.854708081 0.01566365 0.02174876 0.03387849 #> 42  -0.807489007 0.01570068 0.02176355 0.03388200 #> 43  -0.760269933 0.01573780 0.02177856 0.03388577 #> 44  -0.713050859 0.01577501 0.02179378 0.03388979 #> 45  -0.665831785 0.01581230 0.02180921 0.03389408 #> 46  -0.618612711 0.01584968 0.02182487 0.03389863 #> 47  -0.571393637 0.01588715 0.02184073 0.03390343 #> 48  -0.524174563 0.01592470 0.02185682 0.03390851 #> 49  -0.476955489 0.01596234 0.02187313 0.03391384 #> 50  -0.429736414 0.01599909 0.02188965 0.03391944 #> 51  -0.382517340 0.01598387 0.02190639 0.03395456 #> 52  -0.335298266 0.01596871 0.02192335 0.03408835 #> 53  -0.288079192 0.01595361 0.02194053 0.03422291 #> 54  -0.240860118 0.01593858 0.02195793 0.03435824 #> 55  -0.193641044 0.01592362 0.02197555 0.03449436 #> 56  -0.146421970 0.01590871 0.02199340 0.03463127 #> 57  -0.099202896 0.01589388 0.02201146 0.03476896 #> 58  -0.051983822 0.01587910 0.02202975 0.03490745 #> 59  -0.004764748 0.01586439 0.02204826 0.03504674 #> 60   0.042454327 0.01584975 0.02206699 0.03518682 #> 61   0.089673401 0.01583517 0.02208595 0.03532771 #> 62   0.136892475 0.01582065 0.02210514 0.03546941 #> 63   0.184111549 0.01580620 0.02212454 0.03561193 #> 64   0.231330623 0.01579181 0.02214418 0.03575526 #> 65   0.278549697 0.01577748 0.02216404 0.03589941 #> 66   0.325768771 0.01576322 0.02218412 0.03604438 #> 67   0.372987845 0.01574902 0.02220444 0.03619018 #> 68   0.420206919 0.01573489 0.02222498 0.03633682 #> 69   0.467425994 0.01572082 0.02224575 0.03648429 #> 70   0.514645068 0.01570682 0.02226675 0.03663260 #> 71   0.561864142 0.01569287 0.02228798 0.03678175 #> 72   0.609083216 0.01567900 0.02230944 0.03693175 #> 73   0.656302290 0.01566518 0.02233113 0.03708260 #> 74   0.703521364 0.01565143 0.02235305 0.03723431 #> 75   0.750740438 0.01563774 0.02237520 0.03738688 #> 76   0.797959512 0.01562412 0.02239759 0.03754031 #> 77   0.845178586 0.01561056 0.02242021 0.03769461 #> 78   0.892397661 0.01559707 0.02244306 0.03784978 #> 79   0.939616735 0.01558363 0.02246615 0.03800583 #> 80   0.986835809 0.01557027 0.02248947 0.03816276 #> 81   1.034054883 0.01555696 0.02251303 0.03832057 #> 82   1.081273957 0.01554372 0.02253682 0.03847927 #> 83   1.128493031 0.01553054 0.02256085 0.03863886 #> 84   1.175712105 0.01551742 0.02258512 0.03879935 #> 85   1.222931179 0.01550437 0.02260963 0.03896074 #> 86   1.270150253 0.01549138 0.02263437 0.03912303 #> 87   1.317369328 0.01547846 0.02265936 0.03928623 #> 88   1.364588402 0.01546560 0.02268458 0.03945035 #> 89   1.411807476 0.01545280 0.02271004 0.03961538 #> 90   1.459026550 0.01544006 0.02273575 0.03978134 #> 91   1.506245624 0.01542739 0.02276170 0.03994822 #> 92   1.553464698 0.01541478 0.02278789 0.04011603 #> 93   1.600683772 0.01540224 0.02281432 0.04028477 #> 94   1.647902846 0.01538976 0.02284100 0.04045446 #> 95   1.695121920 0.01535638 0.02286792 0.04062508 #> 96   1.742340994 0.01531826 0.02289508 0.04079666 #> 97   1.789560069 0.01528025 0.02292249 0.04096918 #> 98   1.836779143 0.01524234 0.02295015 0.04114267 #> 99   1.883998217 0.01520454 0.02297806 0.04131711 #> 100  1.931217291 0.01516684 0.02300621 0.04149252"},{"path":"https://kyle-rosenblad.github.io/compnet/reference/summarize_compnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarizing compnet model output — summarize_compnet","title":"Summarizing compnet model output — summarize_compnet","text":"Summarizing compnet model output","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/summarize_compnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarizing compnet model output — summarize_compnet","text":"","code":"summarize_compnet(mod, ci_width = 0.95)"},{"path":"https://kyle-rosenblad.github.io/compnet/reference/summarize_compnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarizing compnet model output — summarize_compnet","text":"mod Object class \"compnet\", created buildcompnet() function. ci_width real number (0,1) desired interval width. Defaults 0.95.","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/summarize_compnet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarizing compnet model output — summarize_compnet","text":"data frame summarizing means credible intervals standardized effect sizes fixed effects.","code":""},{"path":"https://kyle-rosenblad.github.io/compnet/reference/summarize_compnet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarizing compnet model output — summarize_compnet","text":"","code":"data(ex_presabs) data(ex_traits)  # Quick demo run. Will prompt warnings. # Run with default warmup and iter for good posterior sampling. ex_compnet <- buildcompnet(presabs=ex_presabs, spvars_dist_int=ex_traits, warmup=10, iter=20) #>  #> SAMPLING FOR MODEL 'srm_binomial' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 9.5e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.95 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: WARNING: No variance estimation is #> Chain 1:          performed for num_warmup < 20 #> Chain 1:  #> Chain 1: Iteration:  1 / 20 [  5%]  (Warmup) #> Chain 1: Iteration:  2 / 20 [ 10%]  (Warmup) #> Chain 1: Iteration:  4 / 20 [ 20%]  (Warmup) #> Chain 1: Iteration:  6 / 20 [ 30%]  (Warmup) #> Chain 1: Iteration:  8 / 20 [ 40%]  (Warmup) #> Chain 1: Iteration: 10 / 20 [ 50%]  (Warmup) #> Chain 1: Iteration: 11 / 20 [ 55%]  (Sampling) #> Chain 1: Iteration: 12 / 20 [ 60%]  (Sampling) #> Chain 1: Iteration: 14 / 20 [ 70%]  (Sampling) #> Chain 1: Iteration: 16 / 20 [ 80%]  (Sampling) #> Chain 1: Iteration: 18 / 20 [ 90%]  (Sampling) #> Chain 1: Iteration: 20 / 20 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.042 seconds (Warm-up) #> Chain 1:                0.054 seconds (Sampling) #> Chain 1:                0.096 seconds (Total) #> Chain 1:  #> Warning: The largest R-hat is 2.12, indicating chains have not mixed. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#r-hat #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess  ex_compnet_summ <- summarize_compnet(ex_compnet) ex_compnet_summ #>                      Mean        2.5%      97.5% #> intercept     -4.62565145 -5.32221387 -4.1950289 #> ndtrait_dist   0.99868175  0.83577201  1.1704203 #> domtrait_dist -0.96764825 -1.18759992 -0.7517134 #> ndtrait_sp    -0.02434241 -0.35779263  0.3145083 #> domtrait_sp    0.29021055 -0.02802349  0.5931627"}]
